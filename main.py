# main.py - Arquivo principal que orquestra o sistema completo

# Instalar depend√™ncias se necess√°rio:
# pip install fastapi nest-asyncio pyngrok uvicorn

import nest_asyncio
from pyngrok import ngrok, conf
import uvicorn
import sys
import os

# Importar m√≥dulos do projeto
import webhook
import GET


def verificar_dependencias():
    """
    Verifica se todas as depend√™ncias est√£o instaladas
    """
    dependencias = ['fastapi', 'pyngrok', 'uvicorn', 'requests']
    faltando = []

    for dep in dependencias:
        try:
            __import__(dep)
        except ImportError:
            faltando.append(dep)

    if faltando:
        print("‚ùå Depend√™ncias faltando:")
        for dep in faltando:
            print(f"   - {dep}")
        print("\nüí° Instale com: pip install " + " ".join(faltando))
        return False

    return True


def configurar_ngrok():
    """
    Configura o ngrok com o token de autentica√ß√£o
    """
    try:
        # Configurar authtoken (substitua pelo seu real)
        auth_token = "2xx8LQUnhKIsNUxERL0JGniq3xg_3ahxzWJjMc7K1kduj1xnm"
        conf.get_default().auth_token = auth_token

        print("‚úÖ ngrok configurado com sucesso!")
        return True

    except Exception as e:
        print(f"‚ùå Erro ao configurar ngrok: {e}")
        return False


def inicializar_sistema():
    """
    Inicializa o sistema completo
    """
    print("üöÄ INICIANDO SISTEMA DE WEBHOOK E FORMUL√ÅRIOS")
    print("=" * 60)

    # Verificar depend√™ncias
    print("üì¶ Verificando depend√™ncias...")
    if not verificar_dependencias():
        return False

    # Aplicar corre√ß√£o para loop de eventos
    nest_asyncio.apply()
    print("üîß Loop de eventos configurado.")

    # Configurar ngrok
    print("üåê Configurando ngrok...")
    if not configurar_ngrok():
        return False

    print("‚úÖ Sistema inicializado com sucesso!")
    return True


def criar_tunel_ngrok(porta=8000):
    """
    Cria o t√∫nel ngrok
    """
    try:
        public_url = ngrok.connect(porta)
        print(f"üîó T√∫nel ngrok criado: {public_url}")
        return public_url
    except Exception as e:
        print(f"‚ùå Erro ao criar t√∫nel ngrok: {e}")
        return None


def exibir_informacoes_sistema(public_url):
    """
    Exibe informa√ß√µes do sistema para o usu√°rio
    """
    print("\n" + "=" * 60)
    print("üéØ SISTEMA PRONTO PARA USO!")
    print("=" * 60)

    print(f"üîó URL p√∫blica do webhook: {public_url}/webhook")
    print(f"üìã Modo de opera√ß√£o: üîÑ Cache atualizado a cada webhook")

    print("\nüåê ENDPOINTS DISPON√çVEIS:")
    print(f"   POST {public_url}/webhook")
    print("      ‚îî‚îÄ‚îÄ Receber webhooks (atualiza cache automaticamente)")

    print(f"   GET  {public_url}/itens-habilitados")
    print("      ‚îî‚îÄ‚îÄ Listar itens do √∫ltimo webhook processado")

    print(f"   GET  {public_url}/recarregar-cache")
    print("      ‚îî‚îÄ‚îÄ For√ßar recarregamento manual do cache")

    print(f"   GET  {public_url}/status-cache")
    print("      ‚îî‚îÄ‚îÄ Verificar status e informa√ß√µes do cache")

    print("\nüìÅ ARQUIVOS DO PROJETO:")
    print("   üìÑ main.py - Orquestrador principal (este arquivo)")
    print("   üìÑ webhook.py - Fun√ß√µes de processamento do webhook")
    print("   üìÑ GET.py - Fun√ß√µes de requisi√ß√£o e cache de formul√°rios")

    print("\nüîÑ FLUXO DE OPERA√á√ÉO:")
    print("   1. Webhook recebido ‚Üí Atualiza cache de formul√°rios")
    print("   2. Extrai informa√ß√µes do webhook ‚Üí Identifica itens habilitados")
    print("   3. Busca formul√°rios no cache ‚Üí Processa resultados")
    print("   4. Salva resultados por tipo ‚Üí Retorna resposta")

    print("\nüí° DICAS DE USO:")
    print("   ‚Ä¢ O cache √© atualizado automaticamente a cada webhook")
    print("   ‚Ä¢ Resultados s√£o salvos em arquivos JSON por tipo (FT, FA, FO, GC, VC)")
    print("   ‚Ä¢ Use /status-cache para monitorar o sistema")
    print("   ‚Ä¢ Logs detalhados s√£o exibidos no console")


def testar_modulos():
    """
    Testa se os m√≥dulos est√£o funcionando corretamente
    """
    print("\nüß™ Testando m√≥dulos...")

    try:
        # Testar GET.py
        buscador = GET.FormulariosBuscador()
        print("‚úÖ GET.py: M√≥dulo carregado corretamente")

        # Testar webhook.py
        app = webhook.criar_app_fastapi()
        print("‚úÖ webhook.py: M√≥dulo carregado corretamente")

        print("‚úÖ Todos os m√≥dulos funcionando!")
        return True

    except Exception as e:
        print(f"‚ùå Erro ao testar m√≥dulos: {e}")
        return False


def main():
    """
    Fun√ß√£o principal do sistema
    """
    try:
        # Inicializar sistema
        if not inicializar_sistema():
            print("‚ùå Falha na inicializa√ß√£o do sistema.")
            sys.exit(1)

        # Testar m√≥dulos
        if not testar_modulos():
            print("‚ùå Falha nos testes dos m√≥dulos.")
            sys.exit(1)

        # Criar aplica√ß√£o FastAPI usando as fun√ß√µes do webhook
        print("\nüèóÔ∏è  Criando aplica√ß√£o FastAPI...")
        app = webhook.criar_app_fastapi()

        # Criar t√∫nel ngrok
        print("üåê Criando t√∫nel ngrok...")
        public_url = criar_tunel_ngrok(8000)

        if not public_url:
            print("‚ùå Falha ao criar t√∫nel ngrok.")
            sys.exit(1)

        # Exibir informa√ß√µes do sistema
        exibir_informacoes_sistema(public_url)

        # Iniciar servidor
        print("\nüöÄ INICIANDO SERVIDOR...")
        print("   (Pressione Ctrl+C para parar)")
        print("-" * 60)

        uvicorn.run(app, host="0.0.0.0", port=8000)

    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Sistema interrompido pelo usu√°rio.")
        print("üëã Encerrando graciosamente...")

    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)

    finally:
        # Cleanup se necess√°rio
        print("üßπ Limpeza finalizada.")


def executar_teste_rapido():
    """
    Executa um teste r√°pido do sistema sem iniciar o servidor
    """
    print("üß™ TESTE R√ÅPIDO DO SISTEMA")
    print("=" * 40)

    # Testar carregamento de m√≥dulos
    if not testar_modulos():
        return False

    # Testar fun√ß√£o de cache do GET
    print("\nüì° Testando sistema de cache...")
    try:
        sucesso = GET.carregar_formularios()
        if sucesso:
            print("‚úÖ Cache de formul√°rios funcionando!")

            # Teste de busca
            resultados = GET.buscar_clausulas(['1.5.1'], mostrar_detalhes=False)
            print(f"‚úÖ Busca no cache funcionando! ({len(resultados)} resultados)")
        else:
            print("‚ùå Falha no sistema de cache.")
            return False

    except Exception as e:
        print(f"‚ùå Erro no teste de cache: {e}")
        return False

    print("\n‚úÖ TESTE R√ÅPIDO CONCLU√çDO COM SUCESSO!")
    print("üí° Execute 'python main.py' para iniciar o servidor completo.")
    return True


if __name__ == "__main__":
    # Verificar argumentos da linha de comando
    if len(sys.argv) > 1 and sys.argv[1] == "--teste":
        # Modo de teste r√°pido
        executar_teste_rapido()
    else:
        # Modo normal - iniciar servidor completo
        main()
