# main.py - Arquivo principal que orquestra o sistema completo

# Instalar depend√™ncias se necess√°rio:
# pip install fastapi nest-asyncio pyngrok uvicorn

import nest_asyncio
from pyngrok import ngrok, conf
import uvicorn
import sys
import os
import json

# Importar m√≥dulos do projeto
import webhook
import GET
from POST import ChecklistCreator# Importar o criador de checklists
import POSTtest


def verificar_dependencias():
    """
    Verifica se todas as depend√™ncias est√£o instaladas
    """
    dependencias = ['fastapi', 'pyngrok', 'uvicorn', 'requests']
    faltando = []

    for dep in dependencias:
        try:
            __import__(dep)
        except ImportError:
            faltando.append(dep)

    if faltando:
        print("‚ùå Depend√™ncias faltando:")
        for dep in faltando:
            print(f"   - {dep}")
        print("\nüí° Instale com: pip install " + " ".join(faltando))
        return False

    return True


def configurar_ngrok():
    """
    Configura o ngrok com o token de autentica√ß√£o
    """
    try:
        # Configurar authtoken (substitua pelo seu real)
        auth_token = "2xx8LQUnhKIsNUxERL0JGniq3xg_3ahxzWJjMc7K1kduj1xnm"
        conf.get_default().auth_token = auth_token

        print("‚úÖ ngrok configurado com sucesso!")
        return True

    except Exception as e:
        print(f"‚ùå Erro ao configurar ngrok: {e}")
        return False


def inicializar_sistema():
    """
    Inicializa o sistema completo
    """
    print("üöÄ INICIANDO SISTEMA DE WEBHOOK E FORMUL√ÅRIOS")
    print("=" * 60)

    # Verificar depend√™ncias
    print("üì¶ Verificando depend√™ncias...")
    if not verificar_dependencias():
        return False

    # Aplicar corre√ß√£o para loop de eventos
    nest_asyncio.apply()
    print("üîß Loop de eventos configurado.")

    # Configurar ngrok
    print("üåê Configurando ngrok...")
    if not configurar_ngrok():
        return False

    print("‚úÖ Sistema inicializado com sucesso!")
    return True

def criar_tunel_ngrok(porta=8000, dominio="quietly-meet-robin.ngrok-free.app"):
    """
    Cria o t√∫nel ngrok com um dom√≠nio est√°tico
    """
    try:
        # Especificar o dom√≠nio reservado ao criar o t√∫nel
        public_url = ngrok.connect(porta, domain=dominio)
        print(f"üîó T√∫nel ngrok criado com dom√≠nio fixo: {public_url}")
        return public_url
    except Exception as e:
        print(f"‚ùå Erro ao criar t√∫nel ngrok: {e}")
        return None

def exibir_informacoes_sistema(public_url):
    """
    Exibe informa√ß√µes do sistema para o usu√°rio
    """
    print("\n" + "=" * 60)
    print("üéØ SISTEMA PRONTO PARA USO!")
    print("=" * 60)

    print(f"üîó URL p√∫blica do webhook: {public_url}/webhook")
    print(f"üìã Modo de opera√ß√£o: üîÑ Cache atualizado a cada webhook + POST autom√°tico")


def testar_modulos():
    """
    Testa se os m√≥dulos est√£o funcionando corretamente
    """
    print("\nüß™ Testando m√≥dulos...")

    try:
        # Testar GET.py
        buscador = GET.FormulariosBuscador()
        print("‚úÖ GET.py: M√≥dulo carregado corretamente")

        # Testar webhook.py
        app = webhook.criar_app_fastapi()
        print("‚úÖ webhook.py: M√≥dulo carregado corretamente")

        # Testar POST.py
        creator = ChecklistCreator()
        print("‚úÖ POST.py: M√≥dulo carregado corretamente")

        print("‚úÖ Todos os m√≥dulos funcionando!")
        return True

    except Exception as e:
        print(f"‚ùå Erro ao testar m√≥dulos: {e}")
        return False


def modificar_webhook_com_post():
    """
    Modifica o processamento do webhook para incluir o POST autom√°tico
    """
    # Salvar a fun√ß√£o original
    processar_webhook_original = webhook.processar_webhook_completo

    # Vari√°vel global para armazenar o √∫ltimo checklist criado
    ultimo_checklist_id = None

    def processar_webhook_com_post(body):
        """
        Vers√£o modificada que adiciona POST ap√≥s processar webhook
        """
        nonlocal ultimo_checklist_id

        # Processar webhook normalmente
        resultado = processar_webhook_original(body)

        if resultado['status'] == 'sucesso':
            print("\n" + "=" * 60)
            print("üìù INICIANDO CRIA√á√ÉO AUTOM√ÅTICA DO CHECKLIST")
            print("=" * 60)

            try:
                # Extrair informa√ß√µes do resultado
                dados = resultado['dados_formatados']

                # Preparar dados de identifica√ß√£o
                identificacao = {
                    'data_prevista': dados['data_prevista'],
                    'contrato': dados['contrato_concessao'],
                    'identificador': dados['identificador'],
                    'concessionaria': dados['concessionaria']
                }

                # Criar o ID do checklist baseado no identificador
                checklist_id = f"exec_{dados['identificador'].replace(' ', '_').replace('-', '_')}"

                print(f"üìÖ Data prevista: {identificacao['data_prevista']}")
                print(f"üè¢ Concession√°ria: {identificacao['concessionaria']}")

                # Processar os itens habilitados e buscar informa√ß√µes no cache
                itens_por_tipo = processar_itens_para_post(dados, resultado.get('formularios_por_tipo', {}))

                # Criar o checklist usando POST.py
                creator = ChecklistCreator()
                checklist_criado = creator.criar_checklist_completo(
                    identificacao=identificacao,
                    itens_por_tipo=itens_por_tipo,
                    assignee_id="6478f2c883e4a9312d68da0b",  # Pode ser configur√°vel
                    creator_id="6478f2c883e4a9312d68da0b"
                )

                if checklist_criado:
                    ultimo_checklist_id = checklist_criado
                    resultado['checklist_criado'] = checklist_criado
                    print(f"\n‚úÖ CHECKLIST CRIADO COM SUCESSO!")
                    print(f"üìã ID: {checklist_criado}")
                    print("=" * 60)
                else:
                    print("\n‚ùå Falha ao criar checklist")

            except Exception as e:
                print(f"\n‚ùå Erro ao criar checklist: {e}")
                import traceback
                traceback.print_exc()

        return resultado

    # Substituir a fun√ß√£o no m√≥dulo webhook
    webhook.processar_webhook_completo = processar_webhook_com_post

    # Retornar fun√ß√£o para acessar o √∫ltimo checklist
    def obter_ultimo_checklist():
        return {"ultimo_checklist_id": ultimo_checklist_id}

    return obter_ultimo_checklist


def processar_itens_para_post(dados_webhook, formularios_por_tipo=None):
    """
    Processa os itens habilitados e busca informa√ß√µes no cache para criar o formato do POST
    """
    itens_por_tipo = {}

    # Se n√£o tiver formul√°rios, buscar no cache
    if not formularios_por_tipo:
        formularios_por_tipo = {}
        for tipo in ['FA', 'FT', 'FO', 'GC', 'VC']:
            itens_habilitados = []
            for item in dados_webhook[f'itens_{tipo.lower()}']:
                if item['habilitado']:
                    itens_habilitados.append(item['item'])

            if itens_habilitados:
                formularios = GET.buscar_clausulas(itens_habilitados, mostrar_detalhes=False)
                formularios_por_tipo[tipo] = formularios

    # Processar cada tipo
    for tipo in ['FA', 'FT', 'FO', 'GC', 'VC']:
        itens = []

        # Buscar itens habilitados do webhook
        itens_webhook = dados_webhook.get(f'itens_{tipo.lower()}', [])
        itens_habilitados = [item for item in itens_webhook if item['habilitado']]

        if itens_habilitados:
            print(f"\nüìã Processando {len(itens_habilitados)} itens {tipo}...")

            # Para cada item habilitado, buscar no cache
            for item_webhook in itens_habilitados:
                item_clausula = item_webhook['item']

                # Buscar informa√ß√µes do formul√°rio no cache
                formularios = GET.buscar_clausulas([item_clausula], mostrar_detalhes=False)

                if formularios:
                    formulario = formularios[0]  # Pegar o primeiro (deve ser √∫nico)

                    # Extrair informa√ß√µes do formul√°rio
                    for secao in formulario.get('sections', []):
                        if secao.get('title') == 'Identifica√ß√£o':
                            info_item = {}

                            # Mapear os campos
                            for questao in secao.get('questions', []):
                                titulo = questao.get('title', '').lower()
                                valor = None

                                if questao.get('sub_questions'):
                                    valor = questao['sub_questions'][0].get('value')

                                # REMOVER mapeamento de 'item' e 'resposta'
                                # Mapear apenas campos necess√°rios
                                if 'c√≥digo' in titulo:
                                    info_item['codigo'] = valor
                                elif 'instrumento' in titulo:
                                    info_item['instrumento'] = valor or 'Contrato'
                                elif 'dimens√£o' in titulo:
                                    info_item['dimensao'] = valor
                                elif 'verifica√ß√£o' in titulo:
                                    info_item['verificacao'] = valor
                                elif 'indicador' in titulo:
                                    info_item['indicador'] = valor

                            # REMOVER linha de 'resposta'
                            # Adicionar valores padr√£o para AV e peso
                            info_item['av'] = 1
                            info_item['peso'] = 1

                            # MODIFICAR condi√ß√£o - n√£o verificar mais se tem 'item'
                            if info_item:  # Se tem algum campo preenchido
                                itens.append(info_item)
                                print(f"   ‚úÖ Item processado")
                            break

        if itens:
            itens_por_tipo[tipo] = itens

    return itens_por_tipo

def main():
    """
    Fun√ß√£o principal do sistema
    """
    try:
        # Inicializar sistema
        if not inicializar_sistema():
            print("‚ùå Falha na inicializa√ß√£o do sistema.")
            sys.exit(1)

        # Testar m√≥dulos
        if not testar_modulos():
            print("‚ùå Falha nos testes dos m√≥dulos.")
            sys.exit(1)

        # Modificar webhook para incluir POST
        print("\nüîß Configurando POST autom√°tico...")
        obter_ultimo_checklist = modificar_webhook_com_post()
        print("‚úÖ POST autom√°tico configurado!")

        # Criar aplica√ß√£o FastAPI usando as fun√ß√µes do webhook
        print("\nüèóÔ∏è  Criando aplica√ß√£o FastAPI...")
        app = webhook.criar_app_fastapi()

        # Adicionar endpoint para ver √∫ltimo checklist
        @app.get("/ultimo-checklist")
        async def ultimo_checklist():
            """Retorna o ID do √∫ltimo checklist criado"""
            return obter_ultimo_checklist()

        # Criar t√∫nel ngrok com dom√≠nio est√°tico
        print("üåê Criando t√∫nel ngrok com dom√≠nio est√°tico...")
        public_url = criar_tunel_ngrok(8000, "quietly-meet-robin.ngrok-free.app")

        if not public_url:
            print("‚ùå Falha ao criar t√∫nel ngrok.")
            sys.exit(1)

        # Exibir informa√ß√µes do sistema
        exibir_informacoes_sistema(public_url)

        # Iniciar servidor
        print("\nüöÄ INICIANDO SERVIDOR...")
        print("   (Pressione Ctrl+C para parar)")
        print("-" * 60)

        uvicorn.run(app, host="0.0.0.0", port=8000)

    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Sistema interrompido pelo usu√°rio.")
        print("üëã Encerrando graciosamente...")

    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)

    finally:
        # Cleanup se necess√°rio
        print("üßπ Limpeza finalizada.")


def executar_teste_rapido():
    """
    Executa um teste r√°pido do sistema sem iniciar o servidor
    """
    print("üß™ TESTE R√ÅPIDO DO SISTEMA")
    print("=" * 40)

    # Testar carregamento de m√≥dulos
    if not testar_modulos():
        return False

    # Testar fun√ß√£o de cache do GET
    print("\nüì° Testando sistema de cache...")
    try:
        sucesso = GET.carregar_formularios()
        if sucesso:
            print("‚úÖ Cache de formul√°rios funcionando!")

            # Teste de busca
            resultados = GET.buscar_clausulas(['1.5.1'], mostrar_detalhes=False)
            print(f"‚úÖ Busca no cache funcionando! ({len(resultados)} resultados)")
        else:
            print("‚ùå Falha no sistema de cache.")
            return False

    except Exception as e:
        print(f"‚ùå Erro no teste de cache: {e}")
        return False

    # Testar cria√ß√£o de checklist
    print("\nüìù Testando sistema de POST...")
    try:
        creator = ChecklistCreator()
        print("‚úÖ Sistema de POST carregado!")

        # Teste simples de estrutura
        test_data = {
            'data_prevista': '2025-06-23',
            'contrato': 'TEST-001',
            'identificador': 'TEST-2025',
            'concessionaria': 'Empresa Teste'
        }

        print(f"‚úÖ Estrutura de dados validada!")

    except Exception as e:
        print(f"‚ùå Erro no teste de POST: {e}")
        return False

    print("\n‚úÖ TESTE R√ÅPIDO CONCLU√çDO COM SUCESSO!")
    print("üí° Execute 'python main.py' para iniciar o servidor completo.")
    return True


if __name__ == "__main__":
    # Verificar argumentos da linha de comando
    if len(sys.argv) > 1 and sys.argv[1] == "--teste":
        # Modo de teste r√°pido
        executar_teste_rapido()
    else:
        # Modo normal - iniciar servidor completo
        main()